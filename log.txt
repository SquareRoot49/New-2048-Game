## Prompt 1 – 2025-07-14

**Prompt:**  
Create a simple Pygame demo where a square block is launched from the bottom of the screen when the user clicks the mouse. Each time the user clicks, a new block should be created and launched upward with a fixed speed and slight gravity effect. Display multiple blocks if the user clicks multiple times. Include basic gravity, motion update, and window setup. Use an image for the block if available, otherwise use a colored square. Provide clean and beginner-friendly Python code.

**Files Modified:**  
- `pygame_block_launcher.py`  

**Description of Change:**  
Set up the initial Pygame launcher logic:
- Initialized Pygame window with screen size and frame rate
- Created logic to spawn blocks when the user clicks
- Each block is launched upward with an initial velocity and affected by gravity
- Allowed multiple blocks to exist and update simultaneously
- Used colored rectangles to represent blocks

## Prompt 2 – 2025-07-14

**Prompt:**  
Change the current Pygame block launcher so that each block is fired from the bottom-left corner of the screen with both a horizontal and a vertical velocity. The block should move to the right while also moving upward initially, and then fall down due to gravity, following a parabolic trajectory. Use fixed initial values for horizontal and vertical velocity, and apply gravity to simulate downward acceleration. Allow multiple blocks to exist and update simultaneously.

**Files Modified:**  
- `pygame_block_launcher.py`  

**Description of Change:**  
Implemented full 2D projectile motion:
- Each block is now created at the bottom-left corner of the screen
- Blocks are given both a horizontal velocity (`vx`) and an initial upward vertical velocity (`vy`)
- Gravity is applied to the vertical velocity, creating a parabolic motion path
- Blocks fly upward and forward at first, then curve downwards as gravity increases `vy`
- Multiple blocks can move independently with their own motion

## Prompt 3 – 2025-07-14

**Prompt:**  
Upgrade the Pygame block launcher so that each block is fired from the bottom-left corner and moves toward the position where the user clicks. Compute the direction vector from the launch point to the mouse click point, normalize it, and multiply by a fixed launch speed to get the initial velocity. Apply gravity so the block follows a curved arc toward the target. Allow multiple blocks to move at the same time.

**Files Modified:**  
- `pygame_block_launcher.py`  

**Description of Change:**  
Implemented direction-based projectile control:
- Blocks are still fired from the bottom-left corner of the screen
- On mouse click, the program calculates the vector from the launcher to the mouse position
- This vector is normalized and scaled to a fixed initial speed (e.g., 10 px/frame)
- The horizontal and vertical velocities (`vx`, `vy`) are set based on the click direction
- Gravity is applied over time, affecting `vy`, resulting in a curved arc
- Now the player can control the launch angle and trajectory by clicking different parts of the screen

## Prompt 4 – 2025-07-14

**Prompt:**  
Add boundary collision behavior to the projectile blocks:
- If a block hits the **top edge** of the screen, reverse its vertical velocity (vy *= -1)
- If it hits the **right edge**, reverse its horizontal velocity (vx *= -1)
- If it hits the **bottom edge**, stop its downward motion by setting vy = 0 and keeping it at the bottom
Ensure blocks remain inside the screen boundaries and continue updating after collisions.

**Files Modified:**  
- `pygame_block_launcher.py`  

**Description of Change:**  
Implemented custom edge behavior:
- Top boundary: blocks bounce by reversing vertical velocity
- Right boundary: blocks bounce by reversing horizontal velocity
- Bottom boundary: blocks stop falling (vy = 0), and are pinned to the floor
- Added logic to prevent blocks from moving outside the screen area

## Prompt 5 – 2025-07-14

**Prompt:**  
Refactor the code to separate blocks into two lists:
- `active_blocks`: for blocks that are still flying or falling
- `received_blocks`: for blocks that have landed or been received

Keep the existing boundary collision logic unchanged. Update the logic so that:
1. If a block in `active_blocks` hits the bottom edge, it is moved into `received_blocks`
2. If a block in `active_blocks` collides with any block in `received_blocks`, it is also moved into `received_blocks`

Use Pygame's Rect collision detection to check for overlaps between blocks. Make sure to update both lists correctly during each frame.

**Files Modified:**  
- `pygame_block_launcher.py`  

**Description of Change:**  
- Introduced two lists: `active_blocks` and `received_blocks`
- Blocks that hit the ground or collide with others are removed from `active_blocks` and added to `received_blocks`
- Used `pygame.Rect.colliderect()` for block-to-block collision detection
- Ensured visual rendering and logic update occur correctly for both lists

## Prompt 6 – 2025-07-15

**Prompt:**  
Refactor the block merging logic to follow 2048-style mechanics. A block should only merge with a stationary block below it **after it has landed**. Specifically:
- Only consider merging after a block hits the ground or another stationary block
- Check if the block it landed on has the same number. If so, remove both and replace with a new merged block at the same position
- Do not merge during flight or horizontal collision
- Ensure each block only merges once per landing
- Prevent multiple merges into the same block in a single frame

**Files Modified:**  
- `pygame_block_launcher.py`

**Description of Change:**  
- Delayed merge logic to trigger only after landing  
- Removed all in-flight merge checks  
- Implemented vertical-only, post-landing merge behavior  
- Ensured merged blocks replace the old one at correct position  
- Prevented duplicate merges or overlapping state updates


